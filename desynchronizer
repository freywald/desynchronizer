#!/bin/bash

[[ -z "${MY_LIB:-}" ]] && source -- "lib" && MY_LIB=0

readarray -t routes_files < <(ls -- ./*".desynchronize" 2> "/dev/null")

input=${1:-}
if [[ -n "$routes_file" ]]; then
	routes_file="$input.desynchronize"
	shift
elif [[ "${input:0:1}" != "-" && -n "$input" ]]; then
	routes_file="$input.desynchronize"
	shift
elif (( ${#routes_files[@]} == 0 )); then
	echo>&2 -e "ERROR: No route definition file found! (search expression: *.desynchronize)"
	exit 1
elif (( ${#routes_files[@]} > 1 )); then
	PS3="Which route file shall be used?"
	select name in "${routes_files[@]}"; do
		for reply in $REPLY; do
			if [[ "$reply" =~ ^[1-9]+[0-9]*$ ]]; then
            	routes_file="${routes_files[reply-1]}"
            	if [[ -n "$routes_file" ]]; then
            		 break 2
               	fi
            fi
		done
	done
else
	routes_file="${routes_files[0]}"
fi

route_name="${routes_file%.*}"
filter_rules_file=""
source_pre_hook=""
source_post_hook=""
target_pre_hook=""
target_post_hook=""
debug=true

length=1
current_line_number=1
i=0

forwardable_parameter="rsync-options"

if ! $indirect_call_by_route_file; then
	if [[ ! -f "$routes_file" ]]; then
    	echo>&2 -e "ERROR: Route definition file \"$routes_file\" NOT found!"
    	exit 1
    fi

	# shellcheck source=/dev/null
	source -- "$routes_file"
fi

forwardable_parameter="rsync-options"

cursor=0

for (( r = 0; r < queue_configuration_options_count; r++)); do
	wideness="${queue_configuration_options_wideness[r]}"

	is_mirror=false
	verbose=false
	simulate=false
	validate=false
	remote=""
	forwarded_parameters=()
	unknown_parameters=()

	queue_parameters=()

	if $indirect_call_by_route_file; then
		for queue_configuration_option in "$@"; do
			queue_parameters+=("$queue_configuration_option")
		done
	fi

	for queue_configuration_option in "${queue_configuration_options[@]:$cursor:$wideness}"; do
		queue_parameters+=("$queue_configuration_option")
	done

	original_program_arguments=("$@")
	program_arguments="${queue_parameters[*]}"
	long_options="simulate,validate,verbose,mirror,flat,non-flat,flat-postfix:,source:,target:,description:,source-pre-hook:,source-post-hook:,target-pre-hook:,target-post-hook:"
	short_options=":"
	parsed_options=$(getopt --options="$short_options" --longoptions="$long_options" --name "$0" -- "${queue_parameters[@]}") || true

	eval "set -- $parsed_options"

	while (($#)); do
		case "$1" in
			--mirror)
				flat_structure=true
				structure_postfix=""
				is_mirror=true
				;;
			--flat)
				flat_structure=true
				structure_postfix=".desynchronizer-target"
				;;
			--flat-postfix)
				flat_structure=true
				structure_postfix="$2"
				shift
				;;
			--non-flat)
				flat_structure=false
				structure_postfix=""
				;;
			--target)
				target="$2"
				shift
				;;
			--source)
				source="$2"
				shift
				;;
			--description)
				description="$2"
				shift
				;;
			--source-pre-hook)
				source_pre_hook="$2"
				shift
				;;
			--source-post-hook)
				source_post_hook="$2"
				shift
				;;
			--target-pre-hook)
				target_pre_hook="$2"
				shift
				;;
			--target-post-hook)
				target_post_hook="$2"
				shift
				;;
			--verbose)
				verbose=true
				;;
			--simulate)
				simulate=true
				;;
			--validate)
				validate=true
				;;
			--)

				if [[ -n "${2:-}" ]]; then
					echo>&2 "UNKNOWN_DATA: ${2:-}"

					exit 1
				fi

				shift
				break
				;;
			*)
				echo>&2 "UNKNOWN_PARAM: $1"
				exit 1
				;;
		esac
		shift
	done

	ignore_everything_but_known_parameter_list=(
		"--validate"
		"--simulate"
		"--verbose"
		"--mirror"
		"--flat"
		"--non-flat"
		"--flat-postfix"
		"--source"
		"--target"
		"--description"
		"--source-pre-hook"
		"--source-post-hook"
		"--target-pre-hook"
		"--target-post-hook"
		"--$forwardable_parameter"
    )

	collect_arguments_until_double_slash=false
	open_unknown=false
	open_forward=false
	for parameter in $program_arguments; do
		name="${parameter%%=*}"
		value="${parameter#*=}"

		if [[ "--$forwardable_parameter" == "$name"* ]]; then
			is_forwardable_parameter=true
		else
			is_forwardable_parameter=false
		fi

		if $is_forwardable_parameter || ! array_contains "$name" "${ignore_everything_but_known_parameter_list[@]}"; then
			if [[ "${name:0:2}" == "--" ]]; then
				if $is_forwardable_parameter; then
					forwarded_parameters+=( "$value" )
					open_unknown=false
					open_forward=true
				else
					unknown_parameters+=( "$parameter" )
					open_unknown=true
					open_forward=false
				fi

				collect_arguments_until_double_slash=true
			elif $collect_arguments_until_double_slash; then
				if $open_forward; then
					forwarded_parameters[-1]="${forwarded_parameters[-1]} $parameter"
				elif $open_unknown; then
					unknown_parameters[-1]="${unknown_parameters[-1]} $parameter"
				fi
			else
				collect_arguments_until_double_slash=false
			fi
		fi
	done

	for parameter in "${original_program_arguments[@]}"; do
		if ! array_contains "$parameter" "${ignore_everything_but_known_parameter_list[@]}"; then
			if [[ "${parameter:0:1}" == "-" && "${parameter:1:1}" != "-" ]]; then
					forwarded_parameters+=( "$parameter" )
			fi
		fi
	done

	current_date="$(date +"%d.%m.%Y [%H∶%M:%S]")"

	if [[ "$filter_rules_file" == "" && -f "$__current_directory$route_name.filter-rules" ]]; then
		filter_rules_file="$route_name.filter-rules"
	fi

	if [[ -n "$source_pre_hook" ]]; then
		if [[ "${source_pre_hook:0:1}" != "/" ]]; then
			source_pre_hook="$source/$source_pre_hook"
		fi
   		source_pre_hook="$(realpath --quiet -- "$source_pre_hook")"
	fi

	if [[ -n "$source_post_hook" ]]; then
		if [[ "${source_post_hook:0:1}" != "/" ]]; then
			source_post_hook="$source/$source_post_hook"
		fi
		source_post_hook="$(realpath --quiet -- "$source_post_hook")"
	fi

	if [[ -n "$target_pre_hook" ]]; then
		 if [[ "${target_pre_hook:0:1}" != "/" ]]; then
			  target_pre_hook="$target/$target_pre_hook"
		fi
   		target_pre_hook="$(realpath --quiet -- "$target_pre_hook")"
	fi

	if [[ -n "$target_post_hook" ]]; then
		if [[ "${target_post_hook:0:1}" != "/" ]]; then
			target_post_hook="$target/$target_post_hook"
		fi
		target_post_hook="$(realpath --quiet -- "$target_post_hook")"

    	if ! array_contains "$parameter" "${ignore_everything_but_known_parameter_list[@]}"; then
    		if [[ "${parameter:0:1}" == "-" && "${parameter:1:1}" != "-" ]]; then
				forwarded_parameters+=( "$parameter" )
    		fi
    	fi
    fi

	current_date="$(date +"%d.%m.%Y [%H∶%M:%S]")"

	if [[ "$filter_rules_file" == "" && -f "$route_name.filter-rules" ]]; then
		filter_rules_file="$route_name.filter-rules"
	fi

    if [[ -n "$source_pre_hook" ]]; then
    	if [[ "${source_pre_hook:0:1}" != "/" ]]; then
            source_pre_hook="$source/$source_pre_hook"
        fi
   		source_pre_hook="$(realpath --quiet -- "$source_pre_hook")"
    fi

    if [[ -n "$source_post_hook" ]]; then
    	if [[ "${source_post_hook:0:1}" != "/" ]]; then
            source_post_hook="$source/$source_post_hook"
        fi
    	source_post_hook="$(realpath --quiet -- "$source_post_hook")"
    fi

    if [[ -n "$target_pre_hook" ]]; then
    	 if [[ "${target_pre_hook:0:1}" != "/" ]]; then
              target_pre_hook="$target/$target_pre_hook"
        fi
   		target_pre_hook="$(realpath --quiet -- "$target_pre_hook")"
    fi

    if [[ -n "$target_post_hook" ]]; then
    	if [[ "${target_post_hook:0:1}" != "/" ]]; then
        	target_post_hook="$target/$target_post_hook"
        fi
    	target_post_hook="$(realpath --quiet -- "$target_post_hook")"
	fi

	if [[ -z "$target_pre_hook" ]]; then
		target_pre_hook="$source_pre_hook"
	fi

	if [[ -z "$target_post_hook" ]]; then
		target_post_hook="$source_post_hook"
    fi

	basename="$(basename -- "$source")"

	if (( ${#unknown_parameters[@]} > 0 )); then
			echo>&2 "ERROR: unknown parameters: ${1:-}"
			for queue_configuration_option in "${unknown_parameters[@]}"; do
				echo>&2 "\n *$queue_configuration_option*"
			done
		exit 1
    fi

    debug=false

	if $debug; then
		echo -ne "\n\n forwarded_parameters:\n"
		for queue_configuration_option in "${forwarded_parameters[@]}"; do
			echo "$queue_configuration_option"
		done
		echo "$source_pre_hook"
		echo "$source_post_hook"
		echo "$target_pre_hook"
		echo "$target_post_hook"
	fi

	custom_options=("${forwarded_parameters[@]}")

	if [[ -n "$filter_rules_file" ]]; then
		custom_options+=(--filter="merge $filter_rules_file")
    fi

	options_that_take_precedence_last=()
	if $flat_structure; then
		target="$target$structure_postfix"
		synchronizer_application_data_path="$target/.desynchronizer/$current_date"
		backup_directory="$synchronizer_application_data_path/backup-files"
		my_default_log_file="$synchronizer_application_data_path/default.log"
		error_log_file="$synchronizer_application_data_path/error.log"

		options_that_take_precedence_last+=(--exclude='/.desynchronizer/')
		options_that_take_precedence_last+=(--filter='hide /.desynchronizer/') # when --delete-excluded is used, then do not delete this item, even if it is excluded
		options_that_take_precedence_last+=(--filter='protect /.desynchronizer/') # when --delete-excluded is used, then do not delete this item, even if it is excluded
	else
		synchronizer_application_data_path="$target/desynchronizer/$current_date"
		target="$target/files/"
		backup_directory="$synchronizer_application_data_path/backup-files"
		my_default_log_file="$synchronizer_application_data_path/default.log"
		error_log_file="$synchronizer_application_data_path/error.log"
	fi

	if [[ -n "$remote" ]]; then # @todo atm remote desynchronization is not supported for synchronizer
		#remote="$remote:$target"
		remote="$target"
	else
		remote="$target"
	fi

	echo -e "▔▔▔▔▔▔▔▔▔▔▔▔▔▔▔▔▔▔▔▔▔▔▔▔▔▔▔▔▔▔▔▔▔▔▔▔▔▔▔▔▔▔▔▔▔▔▔▔▔▔▔▔▔▔▔▔▔▔▔▔▔▔▔▔▔▔▔▔▔▔▔▔▔▔▔▔▔▔▔\n"
	echo -e "DESYNCHRONIZING '$basename'\n"
	echo -e "Description:\t\t\t\t\t\t\t$description\n"
	echo -e "Source:\t\t\t\t\t\t\t\t\t$source"
	echo -e "Target:\t\t\t\t\t\t\t\t\t$target"
	echo -e "Desynchronizer application data path:\t$synchronizer_application_data_path"
	echo -e "\n▔▔▔▔▔▔▔▔▔▔▔▔▔▔▔▔▔▔▔▔▔▔▔▔▔▔▔▔▔▔▔▔▔▔▔▔▔▔▔▔▔▔▔▔▔▔▔▔▔▔▔▔▔▔▔▔▔▔▔▔▔▔▔▔▔▔▔▔▔▔▔▔▔▔▔▔▔▔▔\n"

	read -r -p "Press enter to continue…"
	nclr 8

	mkdir --parents -- "$synchronizer_application_data_path/backup-files"

	[[ -n "$source_pre_hook" ]] && (cd -- "$source" && "$source_pre_hook" "pre" "source")
	[[ -n "$target_pre_hook" ]] && (cd -- "$target" && "$target_pre_hook" "pre" "target")

	if $simulate; then
		custom_options+=("--dry-run")
	fi
	if $validate; then
		custom_options+=("--checksum")
	fi
	if $verbose; then
		echo -en "ROUTE CONFIGURATION:\n\n"
		for option in "${queue_parameters[@]}"; do
			echo -e "\t – '$option'"
		done
		echo -en "\n\n"

		echo -e "COMPLETE RSYNC SHELL COMMAND LINE STRING:\n"
		echo -e "\trsync" "${custom_options[@]}" -habHAXE --delete --delete-excluded --info=progress2 --inplace --backup --force --progress --stats --log-file="$my_default_log_file" --backup-dir="$backup_directory" "${options_that_take_precedence_last[@]}" -- "$source/" "$remote/" "2> $error_log_file"
		echo -ne "\n\n\n"
		read -r -p "Please review this configuration, and then press the enter or data release key to start the final desynchronization process…"
		nclr 16
	fi

	rsync "${custom_options[@]}" -habHAXE --delete --delete-excluded --info=progress2 --inplace --backup --force --progress --stats --log-file="$my_default_log_file" --backup-dir="$backup_directory" "${options_that_take_precedence_last[@]}" -- "$source/" "$remote/" 2> "$error_log_file"

	cat -- "$error_log_file"

	if $is_mirror; then
		echo >| "$remote/🤍🩵💙 \$desynchronized\$ 💙🩵🤍"
		echo >| "$remote/💜🩷❤️ DO NOT TOUCH THE HIDDEN DIRECTORY .desynchronizer 💜🩷❤️"
		echo >| "$remote/🧡💛💚 DO NOT TOUCH ANY OF THESE FILES HERE, IT'S A MIRROR. 💕 LET US ☼LIVE☼ HERE ☺ 💕 💚💛🧡"
	fi

	[[ -n "$source_post_hook" ]] && (cd -- "$source" && "$source_post_hook" "post" "source")
	[[ -n "$target_post_hook" ]] && (cd -- "$target" && "$target_post_hook" "post" "target")

	[[ -d "$synchronizer_application_data_path/backup-files" && -z "$(ls -1qA -- "$synchronizer_application_data_path/backup-files" 2>"/dev/null")" ]] && rmdir -- "$synchronizer_application_data_path/backup-files"
	[[ -f "$my_default_log_file" && ! -s "$my_default_log_file" ]] && rm -- "$my_default_log_file"
	[[ -f "$error_log_file" && ! -s "$error_log_file" ]] && rm -- "$error_log_file"

	echo -ne "\n"

	((cursor+=wideness))
	((current_line_number+=1))
	((i+=length))
done
