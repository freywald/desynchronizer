#!/bin/bash

[[ -z "${__DESYNCHRONIZER_INCLUDE_ONCE_LIBRARY:-}" ]] && source -- "$(realpath "$(dirname -- "${BASH_SOURCE[0]}")/../")/library/main"

# parse arguments

file_option=""

long_options="file:"
short_options=":"
original_program_arguments=("$@")
parsed_options2=$(getopt --options="$short_options" --longoptions="$long_options" --name "$0" -- "$@") || true
eval "set --  $parsed_options2"
parsed_options=("$@")
set -- "${original_program_arguments[@]}"

input_parameters=()
len=${#parsed_options[@]}
i=0
while (( i<len )); do
	case "${parsed_options[i]}" in
		--file)
			file_option="${parsed_options[i+1]}"
			indirect_call_by_route_file=true
			((i++))
			;;
		--)
			;;
		*)
			input_parameters+=("${parsed_options[i]}")
			;;
	esac

	((i++))
done

set -- "${input_parameters[@]}"

# evaluate arguments

if [[ -z "$file_option" ]]; then
	readarray -t routes_files < <(ls -- ./*".desynchronize" 2> "/dev/null")

	if (( ${#routes_files[@]} == 0 )); then #@todo unclean
		readarray -t routes_files < <(ls -- "./__desynchronized🖧/"*".desynchronize" 2> "/dev/null")
	fi

	possible_file_option=${1:-}
	if [[ -n "$possible_file_option" ]]; then
		if [[ -f "$file_option" ]]; then  #@todo unclean
			routes_file="$possible_file_option.desynchronize"
		else
			routes_file="./__desynchronized🖧/$possible_file_option.desynchronize"
		fi

		new_array=()
		index_removed=0
		for parameter in "${original_program_arguments[@]}"; do
			if [[ "${parameter:0:1}" != "-" && "${parameter:1:1}" != "-" && $index_removed == 0 ]]; then
				index_removed=1

				continue
			fi
			new_array+=("$parameter")
		done

		original_program_arguments=("${new_array[@]}")
		shift
	elif (( ${#routes_files[@]} == 0 )); then
		echo>&2 -e "ERROR: No route definition file found! (search expression: *.desynchronize)"

		exit 1
	elif (( ${#routes_files[@]} > 1 )); then
		PS3="Which route file shall be used?"

		select name in "${routes_files[@]}"; do
			for reply in $REPLY; do
				if [[ "$reply" =~ ^[1-9]+[0-9]*$ ]]; then
					routes_file="${routes_files[reply-1]}"
					if [[ -n "$routes_file" ]]; then
						 break 2
					fi
				fi
			done
		done
	else
		routes_file="${routes_files[0]}"
	fi
else
	routes_files=()

	if $indirect_call_by_route_file; then
		if [[ $file_option == "$0" ]]; then
			file_option=""
		else
			routes_file="$file_option"
		fi
	fi
fi

if [[ ! -f "$routes_file" ]]; then
   	echo>&2 -e "ERROR: route definition file \"$routes_file\" NOT found!"

   	exit 1
fi

route_name="${routes_file%.*}"

if ! $indirect_call_by_route_file; then
	# shellcheck source=/dev/null
	set -- "$@" "${original_program_arguments[@]}"

	# shellcheck disable=SC1090
	source -- "$routes_file"

	exit
fi

# main

desynchronize_with_configuration "${original_program_arguments[@]}"

#route defaults

filter_rules_file=""
source_pre_hook=""
source_post_hook=""
target_pre_hook=""
target_post_hook=""
path_postfix=""
default_filter_rules_file=""
debug=false
ignore_arguments=("--file")
forwardable_parameter="rsync-options"

length=1
current_line_number=1
i=0
cursor=0
for (( r = 0; r < queue_configuration_options_count; r++)); do
	wideness="${queue_configuration_options_wideness[r]}"

	is_mirror=false
	verbose=false
	simulate=false
	validate=false
	remote=""
	forwarded_parameters=()
	queue_parameters=()
	flat_structure=false
	structure_postfix=""

	for queue_configuration_option in "${queue_configuration_options[@]:$cursor:$wideness}"; do
		queue_parameters+=("$queue_configuration_option")
	done

	program_arguments="${queue_parameters[*]}"
	long_options="path-postfix:,simulate,validate,verbose,mirror,flat,non-flat,flat-postfix:,source:,target:,description:,source-pre-hook:,source-post-hook:,target-pre-hook:,target-post-hook:"
	short_options=":"
	parsed_options2=$(getopt --options="$short_options" --longoptions="$long_options" --name "$0" -- "${queue_parameters[@]}") || true

	# shellcheck disable=SC2128
	eval "set -- $parsed_options2"
	parsed_options=("$@")
	set -- "${original_program_arguments[@]}"

	len=${#parsed_options[@]}
	i=0
	while (( i<len )); do
		case "${parsed_options[i]}" in
			--mirror)
				flat_structure=true
				structure_postfix=""
				is_mirror=true
				;;
			--flat)
				flat_structure=true
				structure_postfix=".desynchronizer-target"
				;;
			--flat-postfix)
				flat_structure=true
				structure_postfix="${parsed_options[i+1]}"
				((i++))
				;;
			--non-flat)
				flat_structure=false
				structure_postfix=""
				;;
			--target)
				target="${parsed_options[i+1]}"
				((i++))
				;;
			--source)
				source="${parsed_options[i+1]}"
				((i++))
				;;
			--description)
				description="${parsed_options[i+1]}"
				((i++))
				;;
			--source-pre-hook)
				source_pre_hook="${parsed_options[i+1]}"
				((i++))
				;;
			--source-post-hook)
				source_post_hook="${parsed_options[i+1]}"
				((i++))
				;;
			--target-pre-hook)
				target_pre_hook="${parsed_options[i+1]}"
				((i++))
				;;
			--target-post-hook)
				target_post_hook="${parsed_options[i+1]}"
				((i++))
				;;
			--path-postfix)
				path_postfix="${parsed_options[i+1]}"
				((i++))
				;;
			--verbose)
				verbose=true
				;;
			--simulate)
				simulate=true
				;;
			--validate)
				validate=true
				;;
			--)
				if [[ -n "${parsed_options[i+1]:-}" ]]; then
					echo>&2 "Unexpected parameter: ${parsed_options[i+1]:-}"

					exit 1
				fi

				((i++))
				break
				;;
			*)
				echo>&2 "UNKNOWN_PARAM: ${parsed_options[i]}"

				exit 1
				;;
		esac
		((i++))
	done

	input_not_parsed=()
	for parameter3 in "${original_program_arguments[@]}"; do
		name="${parameter3%%=*}"
		#value="${parameter3#*=}"

		if [[ "--$forwardable_parameter" == "$name" ]]; then
            if [[ "${name:0:2}" == "--" ]]; then
            	forwarded_parameters+=( "$parameter3" )
            	input_not_parsed+=( "$parameter3" )
            fi
        fi

		if ! array_contains "$name" "${parsed_options[@]}" && ! array_contains "$name" "${ignore_arguments[@]}"; then
			input_not_parsed+=( "$parameter3" )
			if [[ "${parameter3:0:1}" == "-" && "${parameter3:1:1}" != "-" ]]; then
				forwarded_parameters+=( "$parameter3" )
			fi
		fi
	done

	current_date="$(date +"%d.%m.%Y [%H∶%M:%S]")"

	if [[ "$filter_rules_file" == "" && -f "$__current_directory/$route_name.filter-rules" ]]; then
		filter_rules_file="$route_name.filter-rules"
	fi

	if [[ "$filter_rules_file" == "" && -f "$route_name.filter-rules" ]]; then
		filter_rules_file="$route_name.filter-rules"
	fi

	if [[ -f "$__script_path/configuration/default.filter-rules" ]]; then
		default_filter_rules_file="$__script_path/configuration/default.filter-rules"
	fi

	if [[ -n "$source_pre_hook" ]]; then
		if [[ "${source_pre_hook:0:1}" != "/" ]]; then
			source_pre_hook="$source/$source_pre_hook"
		fi
   		source_pre_hook="$(realpath --quiet -- "$source_pre_hook")"
	fi

	if [[ -n "$source_post_hook" ]]; then
		if [[ "${source_post_hook:0:1}" != "/" ]]; then
			source_post_hook="$source/$source_post_hook"
		fi
		source_post_hook="$(realpath --quiet -- "$source_post_hook")"
	fi

	if [[ -n "$target_pre_hook" ]]; then
		 if [[ "${target_pre_hook:0:1}" != "/" ]]; then
			  target_pre_hook="$target/$target_pre_hook"
		fi
   		target_pre_hook="$(realpath --quiet -- "$target_pre_hook")"
	fi

	if [[ -n "$target_post_hook" ]]; then
		if [[ "${target_post_hook:0:1}" != "/" ]]; then
			target_post_hook="$target/$target_post_hook"
		fi
		target_post_hook="$(realpath --quiet -- "$target_post_hook")"
    fi

    if [[ -n "$source_pre_hook" ]]; then
    	if [[ "${source_pre_hook:0:1}" != "/" ]]; then
            source_pre_hook="$source/$source_pre_hook"
        fi
   		source_pre_hook="$(realpath --quiet -- "$source_pre_hook")"
    fi

    if [[ -n "$source_post_hook" ]]; then
    	if [[ "${source_post_hook:0:1}" != "/" ]]; then
            source_post_hook="$source/$source_post_hook"
        fi
    	source_post_hook="$(realpath --quiet -- "$source_post_hook")"
    fi

    if [[ -n "$target_pre_hook" ]]; then
    	 if [[ "${target_pre_hook:0:1}" != "/" ]]; then
              target_pre_hook="$target/$target_pre_hook"
        fi
   		target_pre_hook="$(realpath --quiet -- "$target_pre_hook")"
    fi

    if [[ -n "$target_post_hook" ]]; then
    	if [[ "${target_post_hook:0:1}" != "/" ]]; then
        	target_post_hook="$target/$target_post_hook"
        fi
    	target_post_hook="$(realpath --quiet -- "$target_post_hook")"
	fi

	if [[ -z "$target_pre_hook" ]]; then
		target_pre_hook="$source_pre_hook"
	fi

	if [[ -z "$target_post_hook" ]]; then
		target_post_hook="$source_post_hook"
    fi

	if [[ -n "$path_postfix" ]]; then
		source="$source/$path_postfix"
		target="$target/$path_postfix"
	fi

	basename="$(basename -- "$source")"

	#if (( ${#unknown_parameters[@]} > 0 )); then
	#		echo>&2 -e "ERROR: unknown parameters:\n"
	#		for queue_configuration_option in "${unknown_parameters[@]}"; do
	#			echo>&2 -e "\t* $queue_configuration_option"
	#		done
	#	exit 1
    #fi

	if $debug; then
		echo -ne "\n\n forwarded_parameters:\n"
		for queue_configuration_option2 in "${forwarded_parameters[@]}"; do
			echo -e "\t* $queue_configuration_option2"
		done

		[[ -n "$source_pre_hook" ]] && echo "source_pre_hook: $source_pre_hook"
		[[ -n "$source_post_hook" ]] && echo "source_post_hook: $source_post_hook"
		[[ -n "$target_pre_hook" ]] && echo "target_pre_hook: $target_pre_hook"
		[[ -n "$target_post_hook" ]] && echo "target_post_hook: $target_post_hook"
		echo
	fi

	custom_options=("${input_not_parsed[@]}")

	if [[ -n "$default_filter_rules_file" ]]; then
		custom_options+=(--filter="merge $default_filter_rules_file")
    fi

	if [[ -n "$filter_rules_file" ]]; then
		custom_options+=(--filter="merge $filter_rules_file")
    fi

	options_that_take_precedence_last=()
	if $flat_structure; then
		target="$target$structure_postfix"

		synchronizer_application_data_path="$target/.desynchronizer/$current_date"
		backup_directory="$synchronizer_application_data_path/backup-files"
		my_default_log_file="$synchronizer_application_data_path/default.log"
		error_log_file="$synchronizer_application_data_path/error.log"

		options_that_take_precedence_last+=(--exclude='/.desynchronizer/')
		options_that_take_precedence_last+=(--filter='hide /.desynchronizer/') # when --delete-excluded is used, then do not delete this item, even if it is excluded
		options_that_take_precedence_last+=(--filter='protect /.desynchronizer/') # when --delete-excluded is used, then do not delete this item, even if it is excluded
	else
		synchronizer_application_data_path="$target/desynchronizer/$current_date"
		target="$target/files/"
		backup_directory="$synchronizer_application_data_path/backup-files"
		my_default_log_file="$synchronizer_application_data_path/default.log"
		error_log_file="$synchronizer_application_data_path/error.log"
	fi

	if [[ -n "$remote" ]]; then # @todo atm remote desynchronization is not supported for synchronizer
		#remote="$remote:$target"
		remote="$target"
	else
		remote="$target"
	fi

	echo -e "▔▔▔▔▔▔▔▔▔▔▔▔▔▔▔▔▔▔▔▔▔▔▔▔▔▔▔▔▔▔▔▔▔▔▔▔▔▔▔▔▔▔▔▔▔▔▔▔▔▔▔▔▔▔▔▔▔▔▔▔▔▔▔▔▔▔▔▔▔▔▔▔▔▔▔▔▔▔▔\n"
	echo -e "DESYNCHRONIZING '$basename'\n"
	echo -e "Description:\t\t\t\t\t\t\t$description\n"
	echo -e "Source:\t\t\t\t\t\t\t\t\t$source"
	echo -e "Target:\t\t\t\t\t\t\t\t\t$target"
	echo -e "Desynchronizer application data path:\t$synchronizer_application_data_path"
	echo -e "\n▔▔▔▔▔▔▔▔▔▔▔▔▔▔▔▔▔▔▔▔▔▔▔▔▔▔▔▔▔▔▔▔▔▔▔▔▔▔▔▔▔▔▔▔▔▔▔▔▔▔▔▔▔▔▔▔▔▔▔▔▔▔▔▔▔▔▔▔▔▔▔▔▔▔▔▔▔▔▔\n"

	read -r -p "Press enter to continue…"
	nclr 8

	mkdir --parents -- "$synchronizer_application_data_path/backup-files" || exit 1

	[[ -n "$source_pre_hook" ]] && (cd -- "$source" && "$source_pre_hook" "pre" "source")
	[[ -n "$target_pre_hook" ]] && (cd -- "$target" && "$target_pre_hook" "pre" "target")

	if $simulate; then
		$debug && echo "SIMULATE ON"
		custom_options+=("--dry-run")
	fi
	if $validate; then
		$debug && echo "VALIDATE ON"
		custom_options+=("--checksum")
	fi

	if $verbose; then
		echo -en "ROUTE CONFIGURATION:\n\n"
		for option in "${queue_parameters[@]}"; do
			echo -e "\t – '$option'"
		done
		echo -en "\n\n"

		echo -e "COMPLETE RSYNC SHELL COMMAND LINE STRING:\n"
		echo -e "\trsync" "${custom_options[@]}" -habHAXE --delete --delete-excluded --info=progress2 --inplace --backup --force --progress --stats --log-file="$my_default_log_file" --backup-dir="$backup_directory" "${options_that_take_precedence_last[@]}" -- "$source/" "$remote/" "2> $error_log_file"
		echo -ne "\n\n\n"
		read -r -p "Please review this configuration, and then press the enter or data release key to start the final desynchronization process…"
		nclr 1
	fi

	rsync "${custom_options[@]}" -habHAXE --delete --delete-excluded --info=progress2 --inplace --backup --force --progress --stats --log-file="$my_default_log_file" --backup-dir="$backup_directory" "${options_that_take_precedence_last[@]}" -- "$source/" "$remote/" 2> "$error_log_file"

	cat -- "$error_log_file"

	if $is_mirror; then
		if [[ -z "$path_postfix" ]]; then
			echo >| "$remote/🤍🩵💙 \$desynchronized\$ 💙🩵🤍"
			echo >| "$remote/💜🩷❤️ DO NOT TOUCH THE HIDDEN DIRECTORY .desynchronizer 💜🩷❤️"
			echo >| "$remote/🧡💛💚 DO NOT TOUCH ANY OF THESE FILES HERE, IT'S A MIRROR. 💕 LET US ☼LIVE☼ HERE ☺ 💕 💚💛🧡"
		fi
	fi

	[[ -n "$source_post_hook" ]] && (cd -- "$source" && "$source_post_hook" "post" "source")
	[[ -n "$target_post_hook" ]] && (cd -- "$target" && "$target_post_hook" "post" "target")

	[[ -d "$synchronizer_application_data_path/backup-files" && -z "$(ls -1qA -- "$synchronizer_application_data_path/backup-files" 2>"/dev/null")" ]] && rmdir -- "$synchronizer_application_data_path/backup-files"
	[[ -f "$my_default_log_file" && ! -s "$my_default_log_file" ]] && rm -- "$my_default_log_file"
	[[ -f "$error_log_file" && ! -s "$error_log_file" ]] && rm -- "$error_log_file"

	echo -ne "\n"

	((cursor+=wideness))
	((current_line_number+=1))
	((i+=length))
done

